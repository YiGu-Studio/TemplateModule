<Project>
  <!--post build tasks-->
  <UsingTask TaskName="CreateDirectory" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Directory ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var directory = new DirectoryInfo(Directory);
            if (!directory.Exists)
                directory.Create();
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="CopyStaticResources" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <fromDirPrefix ParameterType="System.String" Required="true" />
      <dirList ParameterType="System.String" Required="true" />
      <toDirPrefix ParameterType="System.String" Required="true" />
      <Clean ParameterType="System.Boolean" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            void CopyTo(DirectoryInfo from, DirectoryInfo to)
            {
                if (!to.Exists)
                {
                    to.Create();
                }
                else if (Clean)
                {
                    foreach (var fileInfo in to.GetFiles())
                        fileInfo.Delete();
                }

                foreach (var fileInfo in from.GetFiles())
                    fileInfo.CopyTo(Path.Combine(to.FullName, fileInfo.Name), true);
                foreach (var directoryInfo in from.GetDirectories())
                    CopyTo(directoryInfo, to.CreateSubdirectory(directoryInfo.Name));
            }

            foreach (var dir in dirList.Split(';'))
            {
                CopyTo(
                    new DirectoryInfo(Path.Combine(fromDirPrefix, dir)),
                    new DirectoryInfo(Path.Combine(toDirPrefix, dir)));
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="CopyFolder" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <FromDirectory ParameterType="System.String" Required="true" />
      <ToDirectory ParameterType="System.String" Required="true" />
      <IncludeRegex ParameterType="System.String" Required="true" />
      <ExcludeRegex ParameterType="System.String" />
      <Clean ParameterType="System.Boolean" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            void CopyTo(System.IO.DirectoryInfo from, System.IO.DirectoryInfo to)
            {
                if (!to.Exists)
                  to.Create();
            
                if (Clean)
                {
                    var toFiles = to.GetFiles().Where(x => 
                        Regex.IsMatch(x.Name, IncludeRegex) &&
                        (string.IsNullOrEmpty(ExcludeRegex) ? true : !Regex.IsMatch(x.Name, ExcludeRegex)));
                    foreach (var fileInfo in toFiles)
                        fileInfo.Delete();
                }
        
                var fromFiles = from.GetFiles().Where(x => 
                    Regex.IsMatch(x.Name, IncludeRegex) &&
                    (string.IsNullOrEmpty(ExcludeRegex) ? true : !Regex.IsMatch(x.Name, ExcludeRegex)));
                foreach (var fileInfo in fromFiles)
                    fileInfo.CopyTo(System.IO.Path.Combine(to.FullName, fileInfo.Name), true);
                foreach (var directoryInfo in from.GetDirectories())
                    CopyTo(directoryInfo, to.CreateSubdirectory(directoryInfo.Name));
            }
            CopyTo(new System.IO.DirectoryInfo(FromDirectory), new System.IO.DirectoryInfo(ToDirectory));
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="ReplaceFileText" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <File ParameterType="System.String" Required="true" />
      <Regex ParameterType="System.String" Required="true" />
      <ReplacementText ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          System.IO.File.WriteAllText(
            File,
            System.Text.RegularExpressions.Regex.Replace(System.IO.File.ReadAllText(File), Regex, ReplacementText));
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
